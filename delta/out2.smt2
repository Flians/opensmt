(set-logic QF_UF)
(declare-sort S0 0)
(declare-sort S2 0)
(declare-fun v0 () S0)
(declare-fun v1 () S0)
(declare-fun v2 () S0)
(declare-fun f1 (S0) S2)
(declare-fun f2 (S2) S2)
(assert
 (let ((e9 (f1 v0)))
 (let ((e10 (f1 v2)))
 (let ((e13 (f2 e9)))
 (let ((e14 (f1 v0)))
 (let ((e26 (f2 e14)))
 (let ((e28 (f1 v1)))
 (let ((e64 (ite false e13 e10)))
 (let ((e77 (ite false e26 e28)))
 (let ((e124 (= e77 e10)))
 (let ((e136 (distinct e26 e64)))
 (let ((e138 (xor false e124)))
 (let ((e149 (ite e138 false false)))
 (let ((e159 (xor e136 false)))
 (let ((e184 (xor e149 false)))
 (let ((e186 (= true e159)))
 (let ((e187 (ite false false e184)))
 (let ((e192 (=> false e187)))
 (let ((e193 (= false e192)))
 (let ((e195 (ite false false e193)))
 (let ((e198 (xor e195 false)))
 (let ((e200 (xor e198 false)))
 (let ((e201 (xor false e200)))
 (let ((e203 (=> e186 false)))
 (let ((e205 (not e201)))
 (let ((e206 (xor false e205)))
 (let ((e207 (=> e206 false)))
 (let ((e208 (=> e207 false)))
 (let ((e209 (=> e208 false)))
 (let ((e210 (= e209 e203)))
 e210))))))))))))))))))))))))))))))
(check-sat)

